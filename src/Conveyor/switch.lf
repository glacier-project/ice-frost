target Python{
    files: [source_folder/pallet.py, source_folder/material.py]
};

preamble{=
    from pallet import Pallet 
    from material import Material
=}

reactor Switch(param = "default"){
    //Internal variables
    state name = param   

    //Physical links
    input IN
    output OUT
    input CROSS_IN
    output CROSS  
    input BAY_IN
    output BAY_OUT
    

    //Controller Links
    input command
    output ask

    //Current Pallet
    state pallet
    
    logical action handle_pallet

    reaction(startup){=
        self.pallet = None
    =}

    logical action go_to_bay

    reaction(go_to_bay) -> BAY_OUT{=
        BAY_OUT.set(self.pallet)
        self.pallet = None
    =}

    '''
    The following reaction is called for handling the pallets in the switch.
    It checks if the pallet destination is the switch itself, if so,
    it sends a message to the warehouse that the pallet has arrived.
    Ohterwise, it sends the pallet to the next destination by reading the pallet action.
    '''
    reaction(handle_pallet)-> ask, OUT, CROSS, go_to_bay{=
        if self.pallet is not None:
            self.pallet.position = self.name

            if self.pallet.destination == self.name:
                y = "_pallet_arrived", self.pallet.pallet_id
                ask.set(y)
                
            elif self.pallet.action == "OUT": 
                OUT.set(self.pallet)
                self.pallet = None

            elif self.pallet.action == "CROSS":
                CROSS.set(self.pallet)
                self.pallet = None       

            elif self.pallet.action == "BAY":
                go_to_bay.schedule(0)
    =}

    '''
    When a pallet arrives at the switch, it is stored in the pallet variable and 
    it schedules the handle_pallet action to handle the pallet.''' 
    reaction(IN)-> handle_pallet, ask{=        
        if IN.value is not None:
            self.pallet = IN.value
            if self.name == "M":
                self.pallet.position = self.name
                ask.set(["Move", self.name, self.pallet.destination, self.pallet.pallet_id])

            else:
                handle_pallet.schedule(0)
    =}

    '''
    The following reaction is called when a pallet arrives at the switch from the cross.
    if it is the switch G, it checks if the upcoming data is a material. 
    If it is a material, it stores the material in the pallet object.
    For all the other switches, it stores the pallet in the pallet variable and asks for 
    where to send the pallet.
    '''
    reaction(CROSS_IN)-> ask, handle_pallet{=
        if CROSS_IN.value is not None:
            self.pallet = CROSS_IN.value
            self.pallet.position = self.name
            if self.pallet.looping:
                self.pallet.action = "OUT"
                handle_pallet.schedule(0)

            elif self.pallet.destination != None:
                ask.set(["Move", self.name, self.pallet.destination, self.pallet.pallet_id])
    =}

    '''
    When a pallet arrives, it is stored in the pallet variable and
    Then it checks if the looping keyword is True, if so, it sends the pallet to OUT port.
    Otherwise, it asks to the controller where to send the pallet.
    '''
    reaction(BAY_IN)-> handle_pallet, BAY_OUT, ask{=
        if BAY_IN.value is not None:
            self.pallet = BAY_IN.value
            self.pallet.position = self.name

            if self.pallet.looping == True:
                self.pallet.action = "OUT"
                handle_pallet.schedule(0)

            elif self.pallet.destination is not None:                
                ask.set(["Move", self.name, self.pallet.destination, self.pallet.pallet_id])
    =}

    '''
    The following reaction is called when the controller sends a command to the switch.
    If the command is to create a pallet, it stores the pallet in the pallet variable and asks the controller
    where to send the pallet.
    If the command is to move the pallet, it sends the pallet to appropriate port.
    If the command is BAY, it sends the pallet to the BAY_OUT port.
    If the command is Give, it sends the pallet object to the CROSS port.
    This last one is used to send the material to any machines that interact with the material
    on the pallet.
    '''
    reaction(command) -> handle_pallet{=
        if command.value[1] == self.name and command.value[0] == "Create":
            self.pallet = command.value[2]
            if self.pallet.looping == True:
                self.pallet.action = "OUT"
        
        elif command.value[1] == self.name and command.value[0] == "Move" and self.pallet is not None:
            if command.value[2] == "CROSS":                
                self.pallet.action = command.value[2]   

            elif command.value[2] == "OUT":
                self.pallet.action = command.value[2]
                
            elif command.value[1] == self.name and command.value[2] == "BAY":
                self.pallet.bay = True
                self.pallet.action = command.value[2]

        handle_pallet.schedule(0)        
    =}
}