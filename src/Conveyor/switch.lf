target Python

import FrostBase from "../../../frost/src/lib/FrostBase.lf"

preamble{=
    from pallet import Pallet 
    from utils import ControllerCommand, SwitchAction
=}

reactor Switch extends FrostBase{

    input from_segment
    output to_segment
    input from_interchange
    output to_interchange  
    input from_bay
    output to_bay
    
    input controller_command
    output ask_to_controller

    state pallet = {=None=}
    
    logical action unhandled_pallet
    logical action go_to_bay

    reaction(go_to_bay) -> to_bay{=
        to_bay.set(self.pallet)
        self.pallet = None
    =}

    reaction(unhandled_pallet)-> ask_to_controller, to_segment, to_interchange, go_to_bay{=
        if self.pallet is not None:
            self.pallet.position = self.name

            if self.pallet.destination == self.name:
                y = Events.pallet_arrived, self.pallet.id
                ask_to_controller.set(y)
                
            elif self.pallet.action == SwitchAction.advance: 
                to_segment.set(self.pallet)
                self.pallet = None

            elif self.pallet.action == SwitchAction.cross:
                to_interchange.set(self.pallet)
                self.pallet = None       

            elif self.pallet.action == SwitchAction.go_to_bay:
                go_to_bay.schedule(0)

            else:
                ask_to_controller.set([ControllerCommand.move, self.name, self.pallet.destination, self.pallet.id])
    =}

    reaction(from_segment)-> unhandled_pallet, ask_to_controller{=        
        if from_segment.value is not None:
            if self.pallet is not None:
                raise Exception(f"Error: Switch {self.name} already has a pallet.")
            
            self.pallet = from_segment.value
            if self.name == "M":
                self.pallet.position = self.name
                ask_to_controller.set([ControllerCommand.move, self.name, self.pallet.destination, self.pallet.id])

            else:
                unhandled_pallet.schedule(0)
    =}

    reaction(from_interchange)-> ask_to_controller, unhandled_pallet{=
        if from_interchange.value is not None:
            self.pallet = from_interchange.value
            self.pallet.position = self.name
            if self.pallet.looping:
                self.pallet.action = SwitchAction.advance
                unhandled_pallet.schedule(0)

            elif self.pallet.destination != None:
                ask_to_controller.set([ControllerCommand.move, self.name, self.pallet.destination, self.pallet.id])
    =}

    reaction(from_bay)-> unhandled_pallet, to_bay, ask_to_controller{=
        if from_bay.value is not None:
            self.pallet = from_bay.value
            self.pallet.position = self.name

            if self.pallet.looping == True:
                self.pallet.action = SwitchAction.advance
                unhandled_pallet.schedule(0)

            elif self.pallet.destination is not None:                
                ask_to_controller.set([ControllerCommand.move, self.name, self.pallet.destination, self.pallet.id])
    =}

    reaction(controller_command) -> unhandled_pallet{=
        if controller_command.value[1] == self.name and controller_command.value[0] == ControllerCommand.move and self.pallet is not None:
            if controller_command.value[2] == SwitchAction.cross:                
                self.pallet.action = controller_command.value[2]   

            elif controller_command.value[2] == SwitchAction.advance:
                self.pallet.action = controller_command.value[2]
                
            elif controller_command.value[1] == self.name and controller_command.value[2] == SwitchAction.go_to_bay:
                self.pallet.bay = True
                self.pallet.action = controller_command.value[2]
        
        elif controller_command.value[1] == self.name and controller_command.value[0] == ControllerCommand.create:
            self.pallet = controller_command.value[2]
            if self.pallet.looping == True:
                self.pallet.action = SwitchAction.advance

        unhandled_pallet.schedule(0)        
    =}
}