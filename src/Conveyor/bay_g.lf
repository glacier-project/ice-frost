target Python

preamble{=
    from pallet import Pallet
    from utils import Events
=}

reactor bay_G(param = "default"){
    //Internal variables
    state name = param   

    //Physical links
    input IN
    output OUT
    output FROST_OUT

    //Controller Links
    input command
    output ask

    //Current Pallet
    state pallet
    
    logical action handle_pallet

    reaction(startup){=
        self.pallet = None
    =}

    '''
    The following reaction is called for handling the pallets in the switch.
    It checks if the pallet destination is the switch itself, if so,
    it sends a message to the warehouse that the pallet has arrived.
    Ohterwise, it sends the pallet to the next destination by reading the pallet action.
    '''
    reaction(handle_pallet)-> ask, OUT, FROST_OUT{=
        if self.pallet is not None:
            self.pallet.position = self.name

            if self.pallet.destination == self.name:
                y = Events.pallet_arrived, self.pallet.id
                ask.set(y)
                
            else: 
                self.pallet.action = "OUT"
                FROST_OUT.set([self.pallet.id, -1])
                OUT.set(self.pallet)
                self.pallet = None
    =}

    '''
    When a pallet arrives at the switch, it is stored in the pallet variable and 
    it schedules the handle_pallet action to handle the pallet.''' 
    reaction(IN)-> handle_pallet, ask, FROST_OUT{=
        if isinstance(IN.value, Pallet):
            self.pallet = IN.value            
            handle_pallet.schedule(0)
            FROST_OUT.set([self.pallet.id, 1])
    =}

    reaction(command) -> handle_pallet, ask{=
        if command.value[0] == "Create":
            self.pallet = command.value[2]
            if self.pallet.looping == True:
                self.pallet.action = "OUT"

            handle_pallet.schedule(0)
        
        elif command.value[0] == "Move" and self.pallet is not None:
            self.pallet.action = command.value[1]

            handle_pallet.schedule(0)        
    =}
}