target Python

import FrostBase from "../../frost/src/lib/FrostBase.lf"

reactor Interchange extends FrostBase{
    state interchange_time = 7000
    state pallet_present = False
    //Physical links
    input from_upper_belt
    input from_lower_belt
    output to_upper_belt
    output to_lower_belt

    logical action delay

    reaction(from_upper_belt) -> delay{=
        self.logger.debug(f"Interchange {self.name} received from upper belt: {from_upper_belt.value}")
        if self.pallet_present:
            raise Exception(f"Interchange {self.name} error: trying to send a pallet when another is still in the interchange")
        self.pallet_present = True    
        delay.schedule(MSEC(self.interchange_time), [True, from_upper_belt.value])
    =}

    reaction(from_lower_belt) -> delay{=
        self.logger.debug(f"Interchange {self.name} received from lower belt: {from_lower_belt.value}")
        if self.pallet_present:
            raise Exception(f"Interchange {self.name} error: trying to send a pallet when another is still in the interchange")
        self.pallet_present = True
        delay.schedule(MSEC(self.interchange_time), [False, from_lower_belt.value])
    =}

    reaction(delay) -> to_upper_belt, to_lower_belt{=
        self.pallet_present = False
        if delay.value[0]:
            to_lower_belt.set(delay.value[1])
            self.logger.debug(f"Interchange {self.name} sent to lower belt: {delay.value[1]}")
        else:
            to_upper_belt.set(delay.value[1])
            self.logger.debug(f"Interchange {self.name} sent to upper belt: {delay.value[1]}")
    =}

}