target Python

import FrostBase from "../../frost/src/lib/FrostBase.lf"

reactor Interchange extends FrostBase{
    state interchange_time = 7000
    state pallet_present = False
    //Physical links
    input from_upper_belt
    input from_lower_belt
    output to_upper_belt
    output to_lower_belt

    logical action delay

    reaction(from_upper_belt) -> delay{=
        value = self._get_input_values(from_upper_belt)

        if not isinstance(value, Pallet):
            raise Exception(f"Interchange {self.name} error: received non-pallet value from upper belt: {value}")
        
        self.logger.debug(f"Interchange {self.name} received from upper belt: {value}")

        if self.pallet_present:
            raise Exception(f"Interchange {self.name} error: trying to send a pallet when another is still in the interchange")

        self.pallet_present = True    
        delay.schedule(MSEC(self.interchange_time), [True, value])
    =}

    reaction(from_lower_belt) -> delay{=
        value = self._get_input_values(from_lower_belt)

        if not isinstance(value, Pallet):
            raise Exception(f"Interchange {self.name} error: received non-pallet value from lower belt: {value}")

        self.logger.debug(f"Interchange {self.name} received from lower belt: {value}")

        if self.pallet_present:
            raise Exception(f"Interchange {self.name} error: trying to send a pallet when another is still in the interchange")

        self.pallet_present = True
        delay.schedule(MSEC(self.interchange_time), [False, value])
    =}

    reaction(delay) -> to_upper_belt, to_lower_belt{=
        condition = delay.value[0]    
        value = delay.value[1]            

        if condition:
            self._set_output_port(value, to_lower_belt)
            self.logger.debug(f"Interchange {self.name} sent low: {value}")
        else:
            self._set_output_port(value, to_upper_belt)
            self.logger.debug(f"Interchange {self.name} sent up: {value}")

        self.pallet_present = False
    =}

}