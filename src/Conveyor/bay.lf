target Python{
    files: [source_folder/pallet.py]
};

import Bay_Switch from "bay_switch.lf"
import Interchange from "interchange.lf"

preamble{=
    from pallet import Pallet 
=}
'''That reactor instiates 3 bay_switches and 2 interchanges to simulate a 3 bay system.
In particular, it is responsible for the exchanges from and to the conveyor belt.'''
reactor Bay(param = "default"){
    //Internal variables
    state name = param   
    state crossing_pallet
    input IN
    output OUT
    output FROST_OUT_1
    output FROST_OUT_2
    output FROST_OUT_3
    state plat1 = 1
    state plat2 = 2
    state plat3 = 3
    Plat1 = new Bay_Switch(param = "1")
    Plat2 = new Bay_Switch(param = "2")
    Plat3 = new Bay_Switch(param = "3")

    INTER_1 = new Interchange(param = "1-2")
    INTER_2 = new Interchange(param = "2-3")

    //First Block
    Plat1.OUT -> INTER_1.IN_DOWN after 1 sec
    INTER_1.OUT_DOWN -> Plat1.IN after 1 sec  
    Plat1.FROST_OUT -> FROST_OUT_1 after 1msec
    //Second Block
    INTER_1.OUT_UP, INTER_2.OUT_DOWN -> Plat2.IN, Plat2.CROSS_IN after 1 sec
    Plat2.OUT, Plat2.CROSS -> INTER_2.IN_DOWN, INTER_1.IN_UP after 1 sec
    Plat2.FROST_OUT -> FROST_OUT_2 after 1msec
    //Third Block
    INTER_2.OUT_UP -> Plat3.IN after 1 sec
    Plat3.OUT -> INTER_2.IN_UP after 1 sec
    Plat3.FROST_OUT -> FROST_OUT_3 after 1msec

    //Controller Links
    input command
    output ask

    logical action free_switch

    #that reaction answers to the controller that it has received the pallet
    reaction(free_switch) -> ask{=
        y = "Free"
        ask.set(y)
    =}

    '''when a pallet arrives, the bay switch receives it and sends it to the first switch
    then it schedules the free_switch event'''
    reaction(IN) -> Plat1.CROSS_IN, free_switch{=
        temp = IN.value
        temp.position = self.name + "0"
        Plat1.CROSS_IN.set(temp)
        free_switch.schedule(0)
    =}

    '''this reaction handles any command that the controller sends to the bay
    Furthermore, it sends the command to the corresponding bay switch
    Create is used for creating a new pallet on the bay
    Move is used for moving a pallet from the current position to the next one
    Release is used for releasing a pallet from the bay to the conveyor belt'''
    reaction(command) -> Plat1.command, Plat2.command, Plat3.command, OUT, ask{=
        temp = command.value
        if temp[0] == "Create":
            if temp[2][0] == self.name:
                if temp[2][1] == "1":
                    Plat1.command.set(temp)
                elif temp[2][1] == "2":
                    Plat2.command.set(temp)
                elif temp[2][1] == "3":
                    Plat3.command.set(temp)
        
        elif temp[0] == "Release" and self.crossing_pallet != None:
            OUT.set(self.crossing_pallet)
            self.crossing_pallet = None
            ask.set("Pallet_outgoing")             

        else:
            if temp[1][0] == self.name:
                if temp[1][1] == "1":
                    Plat1.command.set(temp)
                elif temp[1][1] == "2":
                    Plat2.command.set(temp)
                elif temp[1][1] == "3":
                    Plat3.command.set(temp)

                   
    =}

    '''When a pallet wants to go back to the conveyor, the first bay platform sends it out through
    the CROSS port. The bay sees that behaviour and asks the controller what to do'''
    reaction(Plat1.CROSS) -> ask{=
        self.crossing_pallet = Plat1.CROSS.value
        ask.set(["Pallet_incoming", Plat1.CROSS.value])
    =}
    #the following reactions just redirect the messages from the bay switches to the controller
    reaction(Plat1.ask)-> ask{=
        ask.set(Plat1.ask.value)
    =}

    reaction(Plat2.ask) -> ask{=
        ask.set(Plat2.ask.value)
    =}

    reaction(Plat3.ask) -> ask{=
        ask.set(Plat3.ask.value)
    =}    
}