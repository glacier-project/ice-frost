target Python

import FrostBase from "../../../frost/src/lib/FrostBase.lf"
import BaySwitch from "bay_switch.lf"


reactor Bay extends FrostBase{
    state conveyor_name = {=self.name.split(".")[-1]=}
    state crossing_pallet
    input from_belt
    output to_belt
    output to_frost_pos_1
    output to_frost_pos_2
    output to_frost_pos_3
    state plat1 = 1
    state plat2 = 2
    state plat3 = 3
    state plat1_name = {= self.name + "." + str(self.plat1) =}
    state plat2_name = {= self.name + "." + str(self.plat2) =}
    state plat3_name = {= self.name + "." + str(self.plat3) =}
    Plat1 = new BaySwitch(name = {= self.plat1_name =})
    Plat2 = new BaySwitch(name = {= self.plat2_name =})
    Plat3 = new BaySwitch(name = {= self.plat3_name =})

    Plat1.to_forward -> Plat2.from_back after 2 sec
    Plat2.to_forward -> Plat3.from_back after 2 sec
    Plat3.to_back -> Plat2.from_forward after 2 sec
    Plat2.to_back -> Plat1.from_forward after 2 sec
    Plat1.to_back -> to_belt after 2 sec

    input controller_command
    output ask_to_controller

    reaction(from_belt) -> Plat1.from_back{=
        self.logger.debug(f"Bay {self.conveyor_name} received from belt: {from_belt.value}")
        Plat1.from_back.set(from_belt.value)
    =}
    reaction(controller_command) -> Plat1.controller_command, Plat2.controller_command, Plat3.controller_command{=
        '''
        controller_command format: [[header], [command], [args]]
            header = list of str with Segment names involved in the command
            command = [ControllerCommand, SwitchAction]
            args = additional arguments (if any)
        '''
        value = controller_command.value
        header = value[0][0]
        if header == str(self.conveyor_name + "_" + str(self.plat1)):
            Plat1.controller_command.set(value)
        elif header == str(self.conveyor_name + "_" + str(self.plat2)):
            Plat2.controller_command.set(value)
        elif header == str(self.conveyor_name + "_" + str(self.plat3)):
            Plat3.controller_command.set(value)      
    =}
    reaction(Plat1.ask_to_controller)-> ask_to_controller{=
        ask_to_controller.set(Plat1.ask_to_controller.value)
    =}
    reaction(Plat2.ask_to_controller) -> ask_to_controller{=
        ask_to_controller.set(Plat2.ask_to_controller.value)
    =}
    reaction(Plat3.ask_to_controller) -> ask_to_controller{=
        ask_to_controller.set(Plat3.ask_to_controller.value)
    =}
    
    
    reaction(Plat1.to_frost) -> to_frost_pos_1{=
        to_frost_pos_1.set(Plat1.to_frost.value)
    =}
    reaction(Plat2.to_frost) -> to_frost_pos_2{=
        to_frost_pos_2.set(Plat2.to_frost.value)
    =}
    reaction(Plat3.to_frost) -> to_frost_pos_3{=
        to_frost_pos_3.set(Plat3.to_frost.value)
    =}
}