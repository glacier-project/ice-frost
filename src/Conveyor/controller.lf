target Python{
    files: [source_folder/material.py,
        source_folder/priorityalgorithm.py, 
        source_folder/pallet.py, 
        source_folder/routing_algorithm.py, 
        source_folder/bay_algorithm.py, 
        source_folder/new_destination.py, 
        source_folder/bay_control.py,
    ]
};

preamble{=
    import logging
    from pallet import Pallet 
    from material import Material
    from routing_algorithm import Routing
    from bay_algorithm import Bay_Routing
    from priorityalgorithm import PriorityAlgorithm 
    from new_destination import New_Destination
    from bay_control import Bay_Control   
    from bay_control import Update_Truth_Table
    from bay_control import Update_Bay
    from enum import Enum
    from material import Material
=}

reactor Controller{

    preamble{=        
        class Events(Enum):
            pallet_arrived = "_pallet_arrived"
            move = "Move"
            free = "Free"
    =}

    state pallets
    state pallet_names
    state conveyor 
    state set

    input A_IN
    input B_IN
    input C_IN 
    input D_IN
    input E_IN
    input F_IN
    input H_IN
    input I_IN
    input L_IN
    input M_IN

    input BAY_P_IN
    input BAY_O_IN
    input BAY_N_IN
    input BAY_Z_IN

    input SEG_AB
    input SEG_BC
    input SEG_CD
    input SEG_DE
    input SEG_ML
    input SEG_LI
    input SEG_IH
    input SEG_HG
    input SEG_GF

    //BAYS BUFFERS
    state N_
    state O_
    state P_
    state Z = True
    //DIRECT COMMUNICATION PORT
    output OUT
    output BAY_OUT
    output SEG_OUT
    output BAY_Z_OUT
    output to_G
    input from_G
    //INDIRECT COMMUNICATION PORT
    input FROST_IN
    output FROST_OUT
    output Release
    output Pallets
    //ACTIONS
    logical action control_AF
    logical action control_BH
    logical action control_CI
    logical action control_DL
    logical action control_EM
    logical action control_G
    logical action create_pallet

    //Pallets
    state pallets_to_be_created

    //SEGMENTS
    state BH_buffers
    state CI_buffers
    state DL_buffers
    state GF_buffers
    state HG_buffers
    state DE_buffers
    state P_buffers
    state O_buffers
    state N_buffers
    state M_buffers
    state pallet_on_G

    ############################## ACTION REACTIONS ##############################
    reaction (create_pallet) -> OUT{=
        temp = self.pallets[self.pallets_to_be_created.pop(0)]        
        temp.looping = True
        self.pallet_names.append(temp.pallet_id)         
        self.conveyor[temp.position] = False
        y = "Create", temp.position, self.pallets[temp.pallet_id]
        OUT.set(y)
    =}

    reaction(shutdown){=
        logging.info(f"Conveyor state: {self.conveyor}")
    =}

    reaction (startup)-> OUT, BAY_OUT, create_pallet, Pallets{=
        self.pallet_on_G = False
        self.pallets_to_be_created = [2, 3, 4, 5, 6, 7, 8, 9, 10]
        self.BH_buffers = {"BAY": None, "IN_UP": [], "IN_DOWN": []}
        self.CI_buffers = {"BAY": None, "IN_UP": [], "IN_DOWN": []}
        self.DL_buffers = {"BAY": None, "IN_UP": [], "IN_DOWN": []}
        self.GF_buffers = []
        self.HG_buffers = []
        self.DE_buffers = []
        self.P_buffers = []
        self.O_buffers = []
        self.N_buffers = []
        self.M_buffers = []
        self.pallets = {}
        self.pallet_names = []
        self.N_ = [True, True, True]
        self.O_ = [True, True, True]
        self.P_ = [True, True, True]
        self.conveyor = {"A" : True, "B" : True, "C" : True, "D" : True, "E" : True, "F" : True, "G" : True, "H" : True, "I" : True, "L" : True, "M" : True}
        temp = Pallet(pallet_id = 1, position = "I")
        temp.looping = True
        self.pallets[temp.pallet_id] = temp
        self.pallet_names.append(temp.pallet_id)         
        y = "Create", temp.position, self.pallets[temp.pallet_id]
        OUT.set(y)
        self.pallets[2] = Pallet(pallet_id = 2, position = "M")
        self.pallets[3] = Pallet(pallet_id = 3, position = "L")
        self.pallets[4] = Pallet(pallet_id = 4, position = "C")
        self.pallets[5] = Pallet(pallet_id = 5, position = "D")
        self.pallets[6] = Pallet(pallet_id = 6, position = "E")
        self.pallets[7] = Pallet(pallet_id = 7, position = "H")
        self.pallets[8] = Pallet(pallet_id = 8, position = "A")
        self.pallets[9] = Pallet(pallet_id = 9, position = "B")
        self.pallets[10] = Pallet(pallet_id = 10, position = "I")
        for z in range(1, len(self.pallets)):
            create_pallet.schedule(z-1)
        Pallets.set(self.pallets)
    =}

    reaction(control_AF) -> SEG_OUT{=
        if self.conveyor["A"] == True and self.conveyor["F"] == True and not(not self.GF_buffers):
            self.conveyor["A"] = False
            self.conveyor["F"] = False
            self.GF_buffers.pop(0)
            y = ["GF"]
            SEG_OUT.set(y)        
    =}
    reaction(control_BH)-> SEG_OUT, BAY_OUT, Release{=
        if self.conveyor["B"] == True or self.conveyor["H"] == True:
            y = PriorityAlgorithm(self.BH_buffers)
            if y != None:
                temp = None
                if y != "BOTH":
                    if y == "BAY":
                        temp = self.BH_buffers[y]
                    else:
                        temp = self.BH_buffers[y][0]
                if temp != None and temp.action == "OUT":
                    if y == "IN_UP" and self.conveyor["H"] == True:
                        self.BH_buffers["IN_UP"].pop(0)
                        self.conveyor["H"] = False  
                        y = ["IH"]
                        SEG_OUT.set(y)
                    elif y == "IN_DOWN" and self.conveyor["B"] == True:
                        self.BH_buffers["IN_DOWN"].pop(0)
                        self.conveyor["B"] = False
                        y = ["AB"]
                        SEG_OUT.set(y)
                elif self.conveyor["B"] == True and self.conveyor["H"] == True:
                    if y == "BAY":
                        Release.set(self.BH_buffers["BAY"].pallet_id)
                        self.BH_buffers["BAY"] = None
                        BAY_OUT.set(["Release", "N"])  
                        
                        self.N_[0] = True          
                    elif y == "IN_UP":
                        self.BH_buffers["IN_UP"].pop(0)
                        y = ["IH"]
                        SEG_OUT.set(y)
                    elif y == "IN_DOWN":
                        self.BH_buffers["IN_DOWN"].pop(0)
                        y = ["AB"]
                        SEG_OUT.set(y)
                    elif y == "BOTH":
                        self.BH_buffers["IN_DOWN"].pop(0)
                        self.BH_buffers["IN_UP"].pop(0)
                        y = ["BOTH", "AB", "IH"]
                        SEG_OUT.set(y)
                    
                    self.conveyor["B"] = False
                    self.conveyor["H"] = False  
            else:
                self.conveyor["B"] = True
                self.conveyor["H"] = True                          
    =}
    reaction(control_CI)-> SEG_OUT, BAY_OUT, Release{=
        if self.conveyor["C"] == True or self.conveyor["I"] == True:
            y = PriorityAlgorithm(self.CI_buffers)
            if y != None:
                temp = None
                if y != "BOTH":
                    if y == "BAY":
                        temp = self.CI_buffers[y]   
                    else:
                        temp = self.CI_buffers[y][0]
                if temp != None and temp.action == "OUT":
                    if y == "IN_UP" and self.conveyor["I"] == True:
                        self.CI_buffers["IN_UP"].pop(0)
                        self.conveyor["I"] = False
                        y = ["LI"]
                        SEG_OUT.set(y)
                    elif y == "IN_DOWN" and self.conveyor["C"] == True:
                        self.CI_buffers["IN_DOWN"].pop(0)
                        self.conveyor["C"] = False
                        y = ["BC"]
                        SEG_OUT.set(y)
                elif self.conveyor["C"] == True and self.conveyor["I"] == True:
                    if y == "BAY":
                        Release.set(self.CI_buffers["BAY"].pallet_id)
                        self.CI_buffers["BAY"] = None
                        BAY_OUT.set(["Release", "O"]) 
                        self.O_[0] = True
                    elif y == "IN_UP":
                        self.CI_buffers["IN_UP"].pop(0)
                        y = ["LI"]
                        SEG_OUT.set(y)
                    elif y == "IN_DOWN":
                        self.CI_buffers["IN_DOWN"].pop(0)
                        y = ["BC"]
                        SEG_OUT.set(y)
                    elif y == "BOTH":
                        self.CI_buffers["IN_DOWN"].pop(0)
                        self.CI_buffers["IN_UP"].pop(0)
                        y = ["BOTH", "BC", "LI"]
                        SEG_OUT.set(y)
                    
                    self.conveyor["C"] = False
                    self.conveyor["I"] = False  
            else:
                self.conveyor["C"] = True
                self.conveyor["I"] = True                          
    =}
    reaction(control_DL)-> SEG_OUT, BAY_OUT, Release{=
        if self.conveyor["D"] == True or self.conveyor["L"] == True:
            y = PriorityAlgorithm(self.DL_buffers)
            if y != None:
                temp = None
                if y != "BOTH":
                    if y == "BAY":
                        temp = self.DL_buffers[y]
                    else:
                        temp = self.DL_buffers[y][0]
                    
                if temp != None and temp.action == "OUT":
                    if y == "IN_UP" and self.conveyor["L"] == True:
                        self.DL_buffers["IN_UP"].pop(0)
                        self.conveyor["L"] = False
                        y = ["ML"]
                        SEG_OUT.set(y)
                    elif y == "IN_DOWN" and self.conveyor["D"] == True:
                        self.DL_buffers["IN_DOWN"].pop(0)
                        self.conveyor["D"] = False
                        y = ["CD"]
                        SEG_OUT.set(y)
                elif self.conveyor["D"] == True and self.conveyor["L"] == True:
                    if y == "BAY":
                        Release.set(self.DL_buffers["BAY"].pallet_id)
                        self.DL_buffers["BAY"] = None
                        BAY_OUT.set(["Release", "P"])   
                        self.P_[0] = True
                    elif y == "IN_UP":
                        self.DL_buffers["IN_UP"].pop(0)
                        y = ["ML"]
                        SEG_OUT.set(y)
                    elif y == "IN_DOWN":
                        self.DL_buffers["IN_DOWN"].pop(0)
                        y = ["CD"]
                        SEG_OUT.set(y)
                    elif y == "BOTH":
                        self.DL_buffers["IN_DOWN"].pop(0)
                        self.DL_buffers["IN_UP"].pop(0)
                        y = ["BOTH", "CD", "ML"]
                        SEG_OUT.set(y)
                    
                    self.conveyor["D"] = False
                    self.conveyor["L"] = False  
            else:
                self.conveyor["D"] = True
                self.conveyor["L"] = True                          
    =}
    reaction(control_EM)-> SEG_OUT, BAY_Z_OUT{=
        if self.conveyor["E"] == True and self.conveyor["M"] == True and (self.DE_buffers or self.M_buffers):
            self.conveyor["E"] = False
            self.conveyor["M"] = False
            if self.M_buffers:
                y = ["MOVE", "OUT"]
                BAY_Z_OUT.set(y)
                self.M_buffers.pop(0)
                self.Z = True
            else:             
                self.DE_buffers.pop(0)
                y = ["DE"]
                SEG_OUT.set(y)
    =}
    reaction(control_G) -> SEG_OUT{=
        if self.conveyor["G"] == True and (self.HG_buffers):
            self.conveyor["G"] = False
            self.HG_buffers.pop(0)
            y = ["HG"]
            SEG_OUT.set(y)
    =}

    ############################## SEGMENT REACTIONS ##################################
    reaction (SEG_AB) -> control_AF, control_BH{=
        self.conveyor["A"] = True
        self.conveyor["F"] = True
        temp = SEG_AB.value
        if temp.looping == True:
            temp.action = "OUT"             
        else:
            temp.action = Routing("B", temp.destination)
            if temp.action == "BAY" and Bay_Control(self.N_, int(temp.destination[1])):
                temp.action = "OUT"
        self.BH_buffers["IN_DOWN"].append(temp)
        out = "SEGMENT_AB", temp.pallet_id, temp.position, temp.destination, temp.action, temp.object1
        control_BH.schedule(0)
        control_AF.schedule(1)        
    =}
    reaction(SEG_BC)->control_BH, control_CI{=
        self.conveyor["B"] = True
        self.conveyor["H"] = True
        temp = SEG_BC.value
        if temp.looping == True:
            temp.action = "OUT"             
        else:
            temp.action = Routing("C", temp.destination)
            if temp.action == "BAY" and Bay_Control(self.O_, int(temp.destination[1])):
                temp.action = "OUT"
        self.CI_buffers["IN_DOWN"].append(temp)
        out = "SEGMENT_BC", temp.pallet_id, temp.position, temp.destination, temp.action, temp.object1
        control_CI.schedule(0)
        control_BH.schedule(1)
    =}
    reaction(SEG_CD) -> control_CI, control_DL{=
        self.conveyor["C"] = True
        self.conveyor["I"] = True
        temp = SEG_CD.value
        if temp.looping == True:
            temp.action = "OUT"             
        else:
            temp.action = Routing("D", temp.destination)
            if temp.action == "BAY" and Bay_Control(self.P_, int(temp.destination[1])):
                temp.action = "OUT"
                self.P_buffers.append(temp)
        self.DL_buffers["IN_DOWN"].append(temp)
        out = "SEGMENT_CD", temp.pallet_id, temp.position, temp.destination, temp.action, temp.object1
        control_DL.schedule(0)
        control_CI.schedule(1)
    =}
    reaction(SEG_DE) -> control_DL, control_EM{=
        self.conveyor["D"] = True
        self.conveyor["L"] = True
        temp = SEG_DE.value
        if temp.looping == True:
            temp.action = "OUT"             
        else:
            temp.action = Routing("E", temp.destination)
            if temp.action == "BAY" and self.Z:
                temp.action = "OUT"
        self.DE_buffers.append(temp)
        control_EM.schedule(0)
        control_DL.schedule(1)
    =}
    reaction(SEG_ML) -> control_EM, control_DL{=
        self.conveyor["M"] = True
        self.conveyor["E"] = True
        temp = SEG_ML.value
        if temp.looping == True:
            temp.action = "OUT"             
        else:
            temp.action = Routing("L", temp.destination) 
            if temp.action == "BAY" and not Bay_Control(self.P_, int(temp.destination[1])):
                temp.action = "OUT"
                self.P_buffers.append(temp)
        self.DL_buffers["IN_UP"].append(temp)
        control_DL.schedule(0)
        control_EM.schedule(1)
    =}
    reaction(SEG_LI) -> control_DL, control_CI{=
        self.conveyor["L"] = True
        self.conveyor["D"] = True
        temp = SEG_LI.value
        if temp.looping == True:
            temp.action = "OUT"             
        else:
            temp.action = Routing("I", temp.destination)
            if temp.action == "BAY" and not Bay_Control(self.O_, int(temp.destination[1])):
                temp.action = "OUT"
                self.O_buffers.append(temp)
        self.CI_buffers["IN_UP"].append(temp)   
        out = "SEGMENT_LI", temp.pallet_id, temp.position, temp.destination, temp.action, temp.object1
        control_CI.schedule(0)
        control_DL.schedule(1)
    =}
    reaction(SEG_IH) -> control_BH, control_CI{=
        self.conveyor["I"] = True
        self.conveyor["C"] = True
        temp = SEG_IH.value
        if temp.looping == True:
            temp.action = "CROSS"             
        else:
            temp.action = Routing("H", temp.destination)
            if temp.action =="BAY" and not Bay_Control(self.N_, int(temp.destination[1])):
                temp.action = "OUT"
                self.N_buffers.append(temp)            
        self.BH_buffers["IN_UP"].append(temp)
        out = "SEGMENT_IH", temp.pallet_id, temp.position, temp.destination, temp.action, temp.object1
        control_CI.schedule(0)
        control_BH.schedule(1)
    =}
    reaction(SEG_HG) -> control_BH, control_G{=
        self.conveyor["H"] = True
        self.conveyor["B"] = True
        temp = SEG_HG.value
        temp.action = "OUT"
        self.HG_buffers.append(temp)
        out = "SEGMENT_HG", temp.pallet_id, temp.position, temp.destination, temp.action, temp.object1
        control_G.schedule(0)
        control_BH.schedule(1)
    =}
    reaction(SEG_GF) -> control_AF, control_G{=
        self.conveyor["G"] = True
        temp = SEG_GF.value
        temp.action = "OUT"
        self.GF_buffers.append(temp)
        out = "SEGMENT_GF", temp.pallet_id, temp.position, temp.destination, temp.action, temp.object1
        control_G.schedule(0)
        control_AF.schedule(1)
    =}

    ############################## BAY REACTIONS ##############################
    reaction(BAY_P_IN) -> BAY_OUT, control_DL{=
        if BAY_P_IN.value[0] == "Move":
            s = "P" + BAY_P_IN.value[1]
            ctrl = int(BAY_P_IN.value[3]) if (BAY_P_IN.value[2]) == None else int(BAY_P_IN.value[2][1])
            route =  Bay_Routing(s, BAY_P_IN.value[2], "P")
            n = int(BAY_P_IN.value[1])
            Update_Bay(self.P_, n, route[0])
            y = "Move", s, route[0]
            BAY_OUT.set(y)

        elif BAY_P_IN.value[0] == "Move_in_bay":
            s = "P" + BAY_P_IN.value[1]
            ctrl = int(BAY_P_IN.value[1]) - 1
            if not Bay_Control(self.P_, ctrl):
                return None  
            route =  Bay_Routing(s, BAY_P_IN.value[2], "P")
            n = int(BAY_P_IN.value[1])
            Update_Bay(self.P_, n, route[0])
            y = "Move", s, route[0]
            BAY_OUT.set(y)

        elif BAY_P_IN.value[0] == "_pallet_arrived":
            n = int(BAY_P_IN.value[2]) - 1
            self.P_[n] = False            
            if n == 1:
                self.P_[2] = True
            elif n == 0:
                self.P_[2] = True
                self.P_[1] = True

        elif BAY_P_IN.value == "Free":
            self.conveyor["L"] = True
            self.conveyor["D"] = True

        elif BAY_P_IN.value[0] == "Pallet_incoming":
            self.DL_buffers["BAY"] = BAY_P_IN.value[1]
            control_DL.schedule(0)
    =}

    reaction(BAY_O_IN) -> BAY_OUT, control_CI{=
        if BAY_O_IN.value[0] == "Move_in_bay":
            s = "O" + BAY_O_IN.value[1]
            ctrl = int(BAY_O_IN.value[1]) - 1
            if not Bay_Control(self.O_, ctrl):
                return None            
            route =  Bay_Routing(s, BAY_O_IN.value[2], "O")
            n = int(BAY_O_IN.value[1])
            Update_Bay(self.O_, n, route[0])
            y = "Move", s, route[0]
            BAY_OUT.set(y)
    
        elif BAY_O_IN.value[0] == "Move":
            s = "O" + BAY_O_IN.value[1]
            route =  Bay_Routing(s, BAY_O_IN.value[2], "O")
            n = int(BAY_O_IN.value[1])
            Update_Bay(self.O_, n, route[0])

            y = "Move", s, route[0]
            BAY_OUT.set(y)

        elif BAY_O_IN.value[0] == "_pallet_arrived":
            n = int(BAY_O_IN.value[2]) - 1
            self.O_[n] = False            
            if n == 1:
                self.O_[2] = True
            elif n == 0:
                self.O_[2] = True
                self.O_[1] = True

        elif BAY_O_IN.value == "Free":
            self.conveyor["I"] = True
            self.conveyor["C"] = True
        
        elif BAY_O_IN.value[0] == "Pallet_incoming":
            self.CI_buffers["BAY"] = BAY_O_IN.value[1]
            control_CI.schedule(0)        
    =}

    reaction(BAY_N_IN) -> BAY_OUT, control_BH{=
        if BAY_N_IN.value[0] == "Move":
            s = "N" + BAY_N_IN.value[1]
            route =  Bay_Routing(s, BAY_N_IN.value[2], "N")
            n = int(BAY_N_IN.value[1])
            Update_Bay(self.N_, n, route[0])

            y = "Move", s, route[0]
            BAY_OUT.set(y)

        elif BAY_N_IN.value[0] == "Move_in_bay":
            s = "N" + BAY_N_IN.value[1]
            ctrl = int(BAY_N_IN.value[1]) - 1
            if not Bay_Control(self.N_, ctrl):
                return None
            route =  Bay_Routing(s, BAY_N_IN.value[2], "N")
            n = int(BAY_N_IN.value[1])
            Update_Bay(self.N_, n, route[0])
            y = "Move", s, route[0]
            BAY_OUT.set(y)

        elif BAY_N_IN.value[0] == "_pallet_arrived":
            n = int(BAY_N_IN.value[2]) - 1
            self.N_[n] = False            
            if n == 1:
                self.N_[2] = True
            elif n == 0:
                self.N_[2] = True
                self.N_[1] = True

        elif BAY_N_IN.value == "Free":
            self.conveyor["B"] = True
            self.conveyor["H"] = True

        elif BAY_N_IN.value[0] == "Pallet_incoming":
            self.BH_buffers["BAY"] = BAY_N_IN.value[1]
            control_BH.schedule(0)

    =}

    reaction(BAY_Z_IN) -> BAY_Z_OUT, SEG_OUT, control_EM{=
        temp = BAY_Z_IN.value
        if temp[0] == "Move":
            SEG_OUT.set(["DE", "STOP"])
            self.M_buffers.append(temp[2])
            BAY_Z_OUT.set(["Move", "OUT"])
        elif temp[0] == "_pallet_arrived":
            self.conveyor["E"] = True 
            self.conveyor["M"] = True
            SEG_OUT.set(["DE", "CONTINUE"])
            self.Z = True
            
            control_EM.schedule(0)
    =}

    ############################## SWITCH REACTIONS ##############################
    reaction (A_IN)-> OUT{=
        if A_IN.value is not None and A_IN.value[0] == "Move":
            route = Routing(A_IN.value[1], A_IN.value[2])  
            y = "Move", "A", route
            OUT.set(y)
    =}
    reaction (B_IN) -> OUT{=
        if B_IN.value is not None and B_IN.value[0] == "Move":
            route = Routing(B_IN.value[1], B_IN.value[2])  
            y = "Move", "B", route
            OUT.set(y)
    =}
    reaction (C_IN) -> OUT{=
        if C_IN.value is not None and C_IN.value[0] == "Move":
            route = Routing(C_IN.value[1], C_IN.value[2])  
            y = "Move", "C", route
            OUT.set(y)
    =}
    reaction (D_IN) -> OUT{=
        if D_IN.value is not None and D_IN.value[0] == "Move":
            route = Routing(D_IN.value[1], D_IN.value[2])  
            if route == "BAY":
                if Bay_Control( self.P_, int(D_IN.value[2][1])):
                    route = "OUT"

            y = "Move", "D", route                       
            OUT.set(y)
    =}
    reaction (E_IN) -> OUT{=
        if E_IN.value is not None and E_IN.value[0] == "Move":
            y = "Move", "E", "OUT"
            OUT.set(y)
    =}
    reaction (F_IN) -> OUT{=
        if F_IN.value is not None and F_IN.value[0] == "Move":
            y = "Move", "F", "OUT"
            OUT.set(y)
    =}
    reaction (H_IN) -> OUT{=
        if H_IN.value is not None and H_IN.value[0] == "Move":
            route = "OUT"
            route = Routing(H_IN.value[1], H_IN.value[2])
            y = "Move", "H", route

            if route == "BAY":
                if Bay_Control(self.N_, int(H_IN.value[2][1])):
                    Update_Truth_Table(self.N_, int(H_IN.value[2][1]))
                    y = "Move", "H", route,                       
                else:
                    y = "Move", "H", "OUT"
                
            OUT.set(y)
    =}
    reaction (I_IN) -> OUT{=
        if I_IN.value is not None and I_IN.value[0] == "Move":
            route = Routing(I_IN.value[1], I_IN.value[2])
            y = "Move", "I", route
            if route == "BAY":
                if Bay_Control(self.O_, int(I_IN.value[2][1])):   
                        Update_Truth_Table(self.O_, int(I_IN.value[2][1]))
                        y = "Move", "I", route,                      
                else:
                    y = "Move", "I","OUT"
            OUT.set(y)
    =}
    reaction (L_IN) -> OUT{=
        if L_IN.value is not None and L_IN.value[0] == "Move":
            route = Routing(L_IN.value[1], L_IN.value[2])
            y = "Move", "L", route
            if route == "BAY":
                if Bay_Control( self.P_, int(L_IN.value[2][1])):
                    Update_Truth_Table(self.P_, int(L_IN.value[2][1]))
                    y = "Move", "L", "BAY"
                else:
                    y = "Move", "L", "OUT"

            OUT.set(y)
    =}
    reaction (M_IN) -> OUT{=
        if M_IN.value is not None and M_IN.value[0] == "Move":
            route = "OUT"
            temp = self.pallets[M_IN.value[3]]
            y = None
            if temp.looping:
                y = "Move", "M", "OUT"
            else:
                route = Routing("M", temp.destination)
                y = "Move", "M", route
                
                if route == "BAY":
                    if self.Z:
                        y = "Move", "M", route
                    else:
                        y = "Move", "M", "OUT"
            
            OUT.set(y)
    =}
    ############################## FROST ##############################
    reaction(FROST_IN)-> OUT, BAY_OUT, BAY_Z_OUT, to_G{=
        command = FROST_IN.value[0]
        args = FROST_IN.value[1]
        if FROST_IN.value[0] == 1:
            temp = self.pallets[FROST_IN.value[1][0]]
            length_pos = len(temp.position)
            dest = FROST_IN.value[1][1]
            route = New_Destination(temp.position, dest, length_pos)
            temp.looping = route[0]
            temp.bay = route[1]
            temp.destination = route[2]
            if length_pos == 2:
                if temp.position == "Z1":
                    y = ["Move", "OUT"]
                    BAY_Z_OUT.set(y)
                else:
                    y = "Move", temp.position, Bay_Routing(temp.position, dest, temp.position[0])[0]
                    BAY_OUT.set(y)
            elif temp.position == "G":
                y = "Move", "OUT"
                to_G.set(y)
            
        elif command == 7:
            temp = self.pallets[args[0]]
            temp.looping = True
            temp.bay = None
            if temp.destination == None:
                return 0
            temp.destination = None
            pos = temp.position
            out_data = []
            if pos == "G":
                self.pallet_on_G = False
                y = "Move", "OUT"
                to_G.set(y)
            elif len(pos) == 2:
                i = 2
                if pos == "Z1":
                    BAY_Z_OUT.set(["Move", "OUT"])
                else:
                    if pos[0] == "N":
                        BAY_OUT.set(["Move_in_bay", pos])
                        i = 4
                    elif pos[0] == "O":
                        BAY_OUT.set(["Move_in_bay", pos])
                        i = 3
                    elif pos[0] == "P":
                        BAY_OUT.set(["Move_in_bay", pos])
                        i = 2
    =}

    reaction(from_G){=
        if from_G.value[0] == self.Events.pallet_arrived.value:
            self.pallet_on_G = True           
    =}
}