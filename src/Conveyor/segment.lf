target Python

import FrostBase from "../../../frost/src/lib/FrostBase.lf"

preamble{=
    from pallet import Pallet 
    from utils import Events, SwitchAction, ControllerCommand
=}

reactor Segment extends FrostBase{  
    state segment_time = 2000 
    logical action delay

    state pallets = [] 

    input from_switch
    output to_switch    

    input controller_command
    output ask_to_controller
    
    output to_frost

    reaction (from_switch) -> to_frost, delay{=
        if isinstance(from_switch.value, Pallet):            
            from_switch.value.action = None
            delay.schedule(MSEC(self.segment_time), from_switch.value)
            to_frost.set([Events.pallet_arrived.value, from_switch.value.id])
    =}

    reaction(delay){=
        self.pallets.append(from_switch.value)
            if len(self.pallets) >= 10:
                raise Exception(f"Segment {self.name} error: too many pallets in the segment")
    =}

    reaction (controller_command) -> to_switch, to_frost{=
        temp = controller_command.value
        if temp[0] == self.name and self.pallets: 
            to_frost.set([Events.pallet_released.value, self.pallets[0].id])
            to_switch.set(self.pallets[0])
            self.pallets.pop(0)
        
        elif len(temp) > 1:
            if temp[0] == ControllerCommand.double_advance:
                if (self.name == temp[1] or self.name == temp[2]) and self.pallets:
                    to_frost.set([Events.pallet_released.value, self.pallets[0].id])
                    to_switch.set(self.pallets[0])
                    self.pallets.pop(0)

            elif self.name == temp[0] and self.pallets:
                to_frost.set([Events.pallet_released.value, self.pallets[0].id])
                to_switch.set(self.pallets[0])
                self.pallets.pop(0)
    =}

}