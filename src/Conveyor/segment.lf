target Python

import FrostBase from "../../../frost/src/lib/FrostBase.lf"


reactor Segment extends FrostBase{  
    state conveyor_name = {=self.name.split(".")[-1]=}
    state segment_time = 2000 
    logical action delay

    state pallets = [] 

    input from_switch
    output to_switch    

    input controller_command
    output ask_to_controller
    
    output to_frost

    reaction (from_switch) -> to_frost, ask_to_controller, delay{=
        value = from_switch.value[0]
        self.logger.debug(f"Segment {self.conveyor_name} received from switch: {value}")
        if len(self.pallets) >= 10:
            raise Exception(f"Segment {self.conveyor_name} error: too many pallets in the segment")

        if isinstance(value, Pallet):
            delay.schedule(MSEC(self.segment_time), value)
            self._set_output_port([Events.pallet_arrived.value, value.id] ,to_frost)
    =}

    reaction(delay) -> ask_to_controller{=
        value = delay.value
        self.pallets.append(value)
        if len(self.pallets) == 1:
            self._set_output_port([Events.pallet_arrived, value.id], ask_to_controller)
    =}

    reaction (controller_command) -> to_switch, to_frost, ask_to_controller, delay{=
        '''
        controller_command format: [[header], [command], [args]]
            header = list of str with Segment names involved in the command
            command = [ControllerCommand, SegmentAction]
            args = additional arguments (if any)
        '''        
        value = controller_command.value
        header = value[0]
        for name in header:
            if name == self.conveyor_name:
                break            
        else:
            return 0  # not for me

        self.logger.debug(f"Segment {self.conveyor_name} received command {value}")
        cmd = value[1][0]        
        if cmd not in ControllerCommand:
            raise Exception(f"{self.conveyor_name} error: unknown command {cmd}")
        
        if cmd == ControllerCommand.move:

            seg_act = value[1][1]
            if seg_act not in SegmentAction:
                raise Exception(f"{self.conveyor_name} error: unknown command {seg_act}")
                
            if seg_act == SegmentAction.advance:
                if self.pallets:
                    self._set_output_port([Events.pallet_released.value, self.pallets[0].id], to_frost)
                    self._set_output_port(self.pallets[0], to_switch)
                    self.logger.debug(f"Segment {self.conveyor_name} advanced pallet {self.pallets[0].id}")
                    self.pallets.pop(0)
                    self._set_output_port([Events.pallet_released, self.pallets[0].id if self.pallets else None], ask_to_controller)
                    return 0
                else:
                    raise Exception(f"Segment {self.conveyor_name} error: no pallets to advance")
            else:
                raise Exception(f"Segment {self.conveyor_name} error: unknown segment action {seg_act}")

        elif cmd == ControllerCommand.create:
            pallet_id = value[2][0]
            pallet = (Pallet(pallet_id))
            self.logger.debug(f"Segment {self.conveyor_name} created pallet {pallet_id}")
            self._set_output_port([Events.pallet_created.value, pallet_id], to_frost)
            delay.schedule(MSEC(int(self.segment_time/2)), pallet)
        else:
            raise Exception(f"Segment {self.conveyor_name} error: unknown command {cmd}")
    =}

}