target Python{
    files: [source_folder/pallet.py, source_folder/material.py]
};

preamble{=
    from pallet import Pallet 
    from material import Material
=}

reactor Bay_Switch(param = "default"){
    //Internal variables
    state name = param   

    //Physical links
    input IN
    output OUT
    input CROSS_IN
    output CROSS   
    output FROST_OUT
    //Controller Links
    input command
    output ask

    //Current Pallet
    state pallet
    
    reaction(startup){=
        self.pallet = None
    =}

    logical action pallet_to_be_moved

    reaction(pallet_to_be_moved) ->ask, pallet_to_be_moved, CROSS, FROST_OUT{=
        if not self.pallet:
            return
        if self.pallet.destination == None or self.pallet.destination[0] != self.pallet.position[0]:
            if self.name == "1":
                FROST_OUT.set([self.pallet.pallet_id, self.name, 0])
                CROSS.set(self.pallet)
                self.pallet = None
            else:
                ask.set(["Move_in_bay", self.name, self.pallet.destination, self.pallet.pallet_id])
        else:
            if self.pallet.destination[1] != self.name:
                ask.set(["Move_in_bay", self.name, self.pallet.destination, self.pallet.pallet_id])
        pallet_to_be_moved.schedule(SEC(2))
    =}

    '''This reaction is triggered when a pallet arrives at the bay switch.
    Similarly to the switch it checks the pallet has reached its destination.
    If so, it sends a message to the main reactor to inform the pallet has arrived.
    Otherwise, it asks the controller for the pallet route.
    '''
    reaction(IN)-> ask, FROST_OUT, pallet_to_be_moved{=
        if IN.value is not None:
            self.pallet = IN.value
            position_list = list(self.pallet.position)
            position_list[1] = self.name
            self.pallet.position = "".join(position_list)
            FROST_OUT.set([self.pallet.pallet_id, self.name, self.pallet.pallet_id])
            if self.pallet.looping:
                ask.set(["Move", self.name, self.pallet.destination, self.pallet.pallet_id])
            elif self.pallet.destination[0] == self.pallet.position[0] and self.pallet.destination[1] == self.name:
                ask.set(["_pallet_arrived", self.pallet.pallet_id, self.name])
            else:
                ask.set(["Move", self.name, self.pallet.destination, self.pallet.pallet_id])
    =}

    '''This reaction is triggered when the controller sends a command to the bay switch.
    If the command is to create a pallet, the bay switch stores the pallet 
    and asks the controller for the pallet route.
    If the command is to move a pallet, the bay switch sends the pallet to appropriate port.
    '''
    reaction(command) -> ask, OUT, CROSS, FROST_OUT, pallet_to_be_moved{=
        if command.value[0] == "Create":
            self.pallet = command.value[1]
            ask.set(["Move", self.name, self.pallet.destination, self.pallet.pallet_id])
        
        elif command.value[0] == "Move" and self.pallet is not None:
            if command.value[2] == "CROSS":
                FROST_OUT.set([self.pallet.pallet_id, self.name, 0])
                CROSS.set(self.pallet)      
                
            elif command.value[2] == "OUT":
                FROST_OUT.set([self.pallet.pallet_id, self.name, 0])
                OUT.set(self.pallet)

            self.pallet = None
        elif command.value[0] == "Move_in_bay":
            pallet_to_be_moved.schedule(SEC(0))
    =}

    '''This reaction is triggered when a pallet arrives at the cross switch.
    As before, it checks if the pallet has reached its destination, and if not,
    it asks the controller for the pallet route.
    '''
    reaction(CROSS_IN)-> ask, FROST_OUT, pallet_to_be_moved{=
        if CROSS_IN.value is not None:
            self.pallet = CROSS_IN.value

            position_list = list(self.pallet.position)
            position_list[1] = self.name
            self.pallet.position = "".join(position_list)
            
            FROST_OUT.set([self.pallet.pallet_id, self.name, self.pallet.pallet_id])
            if self.pallet.looping:
                ask.set(["Move", self.name, self.pallet.destination, self.pallet.pallet_id])
            elif self.pallet.destination[0] == self.pallet.position[0] and self.pallet.destination[1] == self.name:
                ask.set(["_pallet_arrived", self.pallet.pallet_id, self.name])
            else:
                ask.set(["Move", self.name, self.pallet.destination, self.pallet.pallet_id])
    =}
}
