target Python{
    #fast: True,
    #timeout: 3600s,
    files: [
        "../frost/src/python_lib/frost.py",
        "../frost/src/python_lib/l_formatter.py",
        "../frost/src/python_lib/time_utils.py",
        "python_utils/ice_proxy.py",
        "python_utils/handle_recipe.py",
    ],
    logging: error,
    single-threaded: false,
}

import Cell1 from "Cell1.lf"
import Cell2 from "Cell2.lf"
import Cell4 from "Cell4.lf"
import Cell5 from "Cell5.lf" 
import Warehouse from "Warehouse.lf"
import Kairos from "Kairos.lf"
import Cell_Conveyor from "Cell_Conveyor.lf"
import ICEProxy from "ICEProxy.lf" 

import FrostBus from "../frost/src/lib/FrostBus.lf"
import Scheduler from "Scheduler.lf"
preamble{= 
import uuid
from frost import *
=}


main reactor{
    preamble{=
        # with open(CONFIG_PATH) as stream:
        #     config = yaml.safe_load(stream)
        # TIME_FORMAT = TimeFormat[config["time_format"]]

        # handler = logging.StreamHandler()
        # handler.setFormatter(LFormatter(lf.time.logical_elapsed, TIME_FORMAT))
        # logger = logging.getLogger()
        # logger.setLevel(logging.INFO)
        # initialize_logger(logging.INFO, TimeFormat.MSECS)
        logging.getLogger("kafka").setLevel(logging.WARNING)
        # logger.addHandler(handler)
        recipe_path = os.environ.get("RECIPE_PATH")
        conditions_path = os.environ.get("CONDITIONS_PATH")
    =}
    
    /*cell1 = new Cell1(_data_model_path = "../resources/data_model/Cell1.yml")
    cell2 = new Cell2(_data_model_path = "../resources/data_model/Cell2.yml")
    cell4 = new Cell4(_data_model_path = "../resources/data_model/Cell4.yml")
    cell5 = new Cell5(_data_model_path = "../resources/data_model/Cell5.yml")
    warehouse = new Warehouse(_data_model_path = "../resources/data_model/Warehouse.yml")
    kairos_aa = new Kairos(_data_model_path = "../resources/data_model/RBKairos.yml")*/
    conveyor = new Cell_Conveyor(name="conveyor", _update_step= 1 msec)
    scheduler = new Scheduler(name = "scheduler")
    bus = new FrostBus(name="frost_bus", width = 3)
    ice_proxy = new ICEProxy(name="iceproxy")

    conveyor.channel_out, scheduler.channel_out, ice_proxy.channel_out -> bus.channel_in after 0
    bus.channel_out -> conveyor.channel_in, scheduler.channel_in, ice_proxy.channel_in after 0

    #Full demo
    //cell1.channel_out, cell2.channel_out, cell5.channel_out, warehouse.channel_out, scheduler.channel_out, kairos_aa.channel_out, conveyor.channel_out, cell4.channel_out -> bus.channel_in after 0
    //bus.channel_out -> cell1.channel_in, cell2.channel_in, cell5.channel_in, warehouse.channel_in, scheduler.channel_in, kairos_aa.channel_in, conveyor.channel_in, cell4.channel_in after 0

    #Demo with 2 machine recipe
    //warehouse.channel_out, kairos_aa.channel_out, scheduler.channel_out -> bus.channel_in after 1 msec
    //bus.channel_out -> warehouse.channel_in, kairos_aa.channel_in, scheduler.channel_in after 1 msec

    #Demo with 4 machine recipe
    //cell5.channel_out, warehouse.channel_out, kairos_aa.channel_out, scheduler.channel_out, conveyor.channel_out -> bus.channel_in after 1 msec
    //bus.channel_out -> cell5.channel_in, warehouse.channel_in, kairos_aa.channel_in, scheduler.channel_in, conveyor.channel_in after 1 msec

    #Demo with just Conveyor
    // conveyor.channel_out, scheduler.channel_out -> bus.channel_in after 1 msec
    // bus.channel_out -> conveyor.channel_in, scheduler.channel_in after 1 msec
}