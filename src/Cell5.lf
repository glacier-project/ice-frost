target Python 

import FrostMachine from "../frost/src/lib/FrostMachine.lf"

reactor Cell5 extends FrostMachine{

    state check_quality_covers = {= self.data_model.get_node("Cell5/Methods/CheckQualityCovers")=}
    state check_quality_lego = {= self.data_model.get_node("Cell5/Methods/CheckQualityLego")=}

    state num_gadget_checks = {= self.data_model.get_node("Cell5/Statistics/ChecksGadget")=}
    state num_lego_checks = {= self.data_model.get_node("Cell5/Statistics/ChecksLego")=}
    state num_total_checks = {= self.data_model.get_node("Cell5/Statistics/ChecksTotal")=}
    state num_gadget_failures = {= self.data_model.get_node("Cell5/Statistics/FaultsGadget")=}
    state num_lego_failures = {= self.data_model.get_node("Cell5/Statistics/FaultsLego")=}
    state num_total_failures = {= self.data_model.get_node("Cell5/Statistics/FaultsTotal")=}
    state last_result = {= self.data_model.get_node("Cell5/Status/LastResult")=}
  
    method check_covers(color){=
        """
        Checks if the color of the covers matches the expected color.
        :param color: The color of the cover to check.
        :return: True if the color is red, False otherwise.
        """
        self.num_total_checks.value = self.num_total_checks.value + 1
        if color == "red":
            self.num_gadget_checks.value = self.num_gadget_checks.value + 1
            self.last_result.value = True
            return True
        else:
            self.num_gadget_failures.value = self.num_gadget_failures.value + 1
            self.num_total_failures.value = self.num_total_failures.value + 1
            self.last_result.value = False
            return False
    =}

    method check_lego(shape1, shape2, shape3){=
        """
        Checks if the shapes of the LEGO pieces match.
        :param shape1: The shape of the first LEGO piece.
        :param shape2: The shape of the second LEGO piece.
        :param shape3: The shape of the third LEGO piece.
        :return: True if all shapes match, False otherwise.
        """
        self.num_total_checks.value = self.num_total_checks.value + 1
        if shape1 == shape2 and shape2 == shape3:
            self.num_lego_checks.value = self.num_lego_checks.value + 1
            self.last_result.value = True
            return True
        else:
            self.num_lego_failures.value = self.num_lego_failures.value + 1
            self.num_total_failures.value = self.num_total_failures.value + 1
            self.last_result.value = False
            return False
    =}

    reaction(startup){=
        self.check_quality_covers.callback = self.check_covers
        self.check_quality_lego.callback = self.check_lego
    =}

}

