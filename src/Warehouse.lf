target Python

import FrostMachine from "../frost/src/lib/FrostMachine.lf"


reactor Warehouse extends FrostMachine{
    
    //Extract and send back need COMPOSITE
    state extract_tray = {= self.data_model.get_node("Warehouse/SocketLink/extractTray") =}
    state send_back_tray = {= self.data_model.get_node("Warehouse/SocketLink/sendBackTray") =}
    state show_message = {= self.data_model.get_node("Warehouse/showMessage") =}

    state warehouse_info = {= self.data_model.get_node("Warehouse/Status/warehouseInfo") =}
    state bay_info = {= self.data_model.get_node("Warehouse/Status/bayInfo") =}
    state tray_in_bay = {= self.data_model.get_node("Warehouse/Status/trayInBay") =}
    state bay_queue_size = {= self.data_model.get_node("Warehouse/Status/bayQueueSize") =}
    state bay_busy = {= self.data_model.get_node("Warehouse/Status/bayBusy") =}
    state bay_ready_for_pickplace = {= self.data_model.get_node("Warehouse/Status/bayReadyForPickPlace") =}
    state tray_calls_count = {= self.data_model.get_node("Warehouse/Statistics/TrayCallsCount") =}
    state tray_to_extract
    state tray_to_sendback
    timer work(0ms, 1000ms)
    logical action delay
    
    reaction(startup){=
        self.data_model.get_node("Warehouse/SocketLink/extract").callback = lambda TrayNumber: self.tray_to_extract.write(TrayNumber) if 1 <= TrayNumber <= 8 else -1
        self.data_model.get_node("Warehouse/SocketLink/sendback").callback = lambda TrayNumber: self.tray_to_sendback.write(TrayNumber) if 1 <= TrayNumber <= 8 else -1
        self.show_message.callback = self.show_Message
        self.tray_to_extract = NumericalVariableNode(name = "tray_to_extract", value = 0, measure_unit = "NoneMeasureUnits.NONE")
        self.tray_to_sendback = NumericalVariableNode(name = "tray_to_sendback", value = 0, measure_unit = "NoneMeasureUnits.NONE")
    =}

    method extract_Tray(TrayNumber){=
        if self.bay_busy.value == True:
            return False
        self.tray_in_bay.value = TrayNumber
        self.tray_calls_count.value = self.tray_calls_count.value + 1
        self.bay_busy.value = True
        self.bay_ready_for_pickplace.value = True
        return True
    =}

    method sendback_Tray(TrayNumber){=
        self.tray_in_bay.value = 0
        self.bay_busy.value = False
        self.bay_ready_for_pickplace.value = False
        return TrayNumber
    =}

    method show_Message(message){=
        print(message)
    =}

    reaction(work)-> delay{=
        if self.tray_to_extract and self.tray_to_extract.value > 0:
            delay.schedule(SEC(5), [self.extract_Tray, self.tray_to_extract.value])
            self.tray_to_extract.value = 0
        elif self.tray_to_sendback and self.tray_to_sendback.value > 0:
            delay.schedule(SEC(5), [self.sendback_Tray, self.tray_to_sendback.value])
            self.tray_to_sendback.value = 0
    =}

    reaction(delay){=
        callback = delay.value[0]
        args = delay.value[1:]
        callback(*args)
    =}

}
