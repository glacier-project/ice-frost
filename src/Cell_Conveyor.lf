target Python{
    files: [Conveyor/conveyor_utils.py]
}

import FrostMachine from "../frost/src/lib/FrostMachine.lf"
import Conveyor from "Conveyor/conveyor.lf"

reactor Cell_Conveyor extends FrostMachine{

    preamble{=
       from conveyor_utils import (
            conveyor_obj, conveyor_data_exchange, Pallets, Bayes, Segments, Commands, Destinations,
            destination_1_1, destination_5, destination_pallet_id_, destination_ok_,
            commands_pointer, IndexPosition, setDestination, PalletPosition, palletNum,
            Pallet, Pallet1, Pallet2, Pallet3, Pallet4, Pallet5, Pallet6, Pallet7, Pallet8, Pallet9, Pallet10,
            Bay, Bay1, Bay2, Bay3, Bay4, Bay5,
            Segment, Segment1, Segment2, Segment3, Segment4, Segment5, Segment6, Segment7, Segment8,
            FIFO, size, item
        )
    =}

    //PALLETS
    state pallet_1
    state pallet_2
    state pallet_3
    state pallet_4
    state pallet_5
    state pallet_6
    state pallet_7
    state pallet_8
    state pallet_9
    state pallet_10
    //BAYES
    state bay1
    state bay2
    state bay3
    state bay4
    state bay5

    state pallets_in_bay

    //SEGMENTS
    state segment_1 
    state segment_2 
    state segment_3 
    state segment_4 
    state segment_5 
    state segment_6 
    state segment_7 
    state segment_8 
    
    //METHODS
    state setPalletDestination
    //COMMANDS
    state dynamic_node  
    state zero_node  
    //LocalVariables
    state pallets 
    state bayes    
    state dict_bay_conveyor
                    
    conveyor = new Conveyor(name = {=self.name + ".conveyor_belt"=})

    reaction (startup){=
        """Initialize the Conveyor reactor."""
        self.pallet_1 = self.data_model.get_node(self.conveyor_obj + self.Pallets + self.Pallet1)
        self.pallet_2 = self.data_model.get_node(self.conveyor_obj + self.Pallets + self.Pallet2)
        self.pallet_3 = self.data_model.get_node(self.conveyor_obj + self.Pallets + self.Pallet3)
        self.pallet_4 = self.data_model.get_node(self.conveyor_obj + self.Pallets + self.Pallet4)
        self.pallet_5 = self.data_model.get_node(self.conveyor_obj + self.Pallets + self.Pallet5)
        self.pallet_6 = self.data_model.get_node(self.conveyor_obj + self.Pallets + self.Pallet6)
        self.pallet_7 = self.data_model.get_node(self.conveyor_obj + self.Pallets + self.Pallet7)
        self.pallet_8 = self.data_model.get_node(self.conveyor_obj + self.Pallets + self.Pallet8)
        self.pallet_9 = self.data_model.get_node(self.conveyor_obj + self.Pallets + self.Pallet9)
        self.pallet_10 = self.data_model.get_node(self.conveyor_obj + self.Pallets + self.Pallet10)
        self.bay1 = self.data_model.get_node(self.conveyor_obj + self.Bayes + self.Bay1)
        self.bay2 = self.data_model.get_node(self.conveyor_obj + self.Bayes + self.Bay2)
        self.bay3 = self.data_model.get_node(self.conveyor_obj + self.Bayes + self.Bay3)
        self.bay4 = self.data_model.get_node(self.conveyor_obj + self.Bayes + self.Bay4)
        self.bay5 = self.data_model.get_node(self.conveyor_obj + self.Bayes + self.Bay5)      
        pallets_in_bay = {1: None, 2: None, 3: None, 4: None, 5: None, 6: None, 7: None, 8: None, 9: None, 10: None}
        self.pallets = self.data_model.get_node(self.conveyor_obj + self.Pallets[:-1])      
        self.segment_1 = self.data_model.get_node(self.conveyor_obj + self.Segments + self.Segment1)    
        self.segment_2 = self.data_model.get_node(self.conveyor_obj + self.Segments + self.Segment2)
        self.segment_3 = self.data_model.get_node(self.conveyor_obj + self.Segments + self.Segment3)
        self.segment_4 = self.data_model.get_node(self.conveyor_obj + self.Segments + self.Segment4)
        self.segment_5 = self.data_model.get_node(self.conveyor_obj + self.Segments + self.Segment5)
        self.segment_6 = self.data_model.get_node(self.conveyor_obj + self.Segments + self.Segment6)
        self.segment_7 = self.data_model.get_node(self.conveyor_obj + self.Segments + self.Segment7)
        self.segment_8 = self.data_model.get_node(self.conveyor_obj + self.Segments + self.Segment8)
        # Methods
        self.setPalletDestination = self.data_model.get_node(self.commands_pointer + "setDestination")
        self.dynamic_node = self.data_model.get_node("Objects/dynamic_node")
        self.zero_node = self.data_model.get_node("Objects/zero_node")
        self.pallets = [self.pallet_1, self.pallet_2, self.pallet_3, self.pallet_4, self.pallet_5, self.pallet_6, self.pallet_7, self.pallet_8, self.pallet_9, self.pallet_10] 
        self.bayes = {5: self.bay5, 11:self.bay1, 21:self.bay2, 31:self.bay3, 41:self.bay4}
        self.dict_bay_conveyor = {
            1:self.Bay1,
            2:self.Bay2, 
            3:self.Bay3, 
            4:self.Bay4,
            5:self.Bay5,
        } 
    =}

    state model_pallets
    
    method _update_model_pallet_destination(pallet, value){=
        self.logger.debug(f"Updating model pallet {pallet} destination to {value}")
        if value == 0 or value == None:
            self.messages_to_conveyor.append([pallet, str(0)])
        else:
            self.messages_to_conveyor.append([pallet, self.convert_destination(value)])

        return True
    =}

    // Periodically send messages to the conveyor system
    logical action check   
    state messages_to_conveyor = {=[]=}
    reaction(check) -> conveyor.from_frost{=
        # If there are messages, send the next one immediately; otherwise, wait 1 second
        if self.messages_to_conveyor:
            conveyor.from_frost.set(self.messages_to_conveyor.pop(0))
            check.schedule(MSEC(1))
        else:
            check.schedule(SEC(1))
    =}

    method getTargetNode(destination){=
        """
        Returns the target node based on the destination value.
        :param destination: The destination value to determine the target node.
        :return: The target node as a string.
        """
        if destination == 40:
            return self.conveyor_obj + self.Bayes + self.Bay5 + "/" + self.IndexPosition + "/" + self.palletNum
        
        bay_num = int(destination / 8)
        pos_num = destination % 8
        bay = self.dict_bay_conveyor.get(bay_num)
        if bay:
            s = self.conveyor_obj + self.Bayes + bay + "/" + self.PalletPosition.format(n=pos_num) + "/" + self.palletNum
            return s
        raise ValueError("Invalid destination value")
    =}

    method convert_destination(destination){=
        if destination is None:
            raise ValueError("Destination cannot be None")
        temp = destination
        position = ""
        temp = int(destination / 8)
        if temp != 5:            
            position = str(destination % 8)
        letter = self.dict_bay_conveyor.get(temp)
        return str(letter + "_" + position) if temp != 5 else str(letter)
    =}

    method setPalletDest(palletNumber, destination){=
        """
        Sets the destination of a pallet and sends a command to the conveyor system.
        :param palletNumber: The number of the pallet to set the destination for.
        :param destination: The destination to set for the pallet.
        :return: The destination as a string.
        """       
        res = str(destination)

        self.dynamic_node.value = self.getTargetNode(destination)
        self.logger.debug(f"Setting destination for pallet {palletNumber} to {destination}")
        self.pallets[palletNumber-1].get_property("destination").value = destination
        return res
    =}
    
    method move_pallet_to_LTU(palletNumber){=
        """
        Releases a pallet by sending a command to the conveyor system.
        :param palletNumber: The number of the pallet to be released.
        :return: True if the pallet was successfully released, False otherwise.
        """
        self.dynamic_node.value = "Cell_Conveyor/zero_node"
        self.zero_node.value = "Cell_Conveyor/zero_node"
        self.messages_to_conveyor.append([palletNumber, "0"])
        return True
    =}
    
    reaction(startup)-> check{=
        """
        Initializes the Cell_Conveyor reactor, setting up the initial state and scheduling the first check.
        """
        check.schedule(SEC(1))
        self.setPalletDestination.callback = self.setPalletDest
        for i in range(1, 11):
            p = self.pallets[i-1]
            p.get_property("destination").set_post_update_value_callback(
                lambda prev, curr, pallet=i: (
                    self._update_model_pallet_destination(pallet, curr)
                )
            )
    =}

    method update_segment(segment, value){=
        """
        Updates the segment state with the given value.
        :param segment: The segment to be updated.
        :param value: [0] 1 if pallet arrived, -1 if pallet left
                      [1] pallet number (if any)
        """
        temp = segment.get_property(self.FIFO)
        temp.get_property(self.size).value += value[0]
        ls = []
        # TODO: What is the meaning of value[0]?
        if value[0] > 0:
            for i in range(0, 9):                
                if temp.get_property(self.item.format(n=i)).value == 0:
                    temp.get_property(self.item.format(n=i)).value = value[1]
                    ls.append(temp.get_property(self.item.format(n=i)).value)
                    break       
                ls.append(temp.get_property(self.item.format(n=i)).value)  
        else:
            for i in range(0, 8):
                temp.get_property(self.item.format(n=i)).value = temp.get_property(self.item.format(n=i+1)).value
                ls.append(temp.get_property(self.item.format(n=i)).value)                
            temp.get_property(self.item.format(n=9)).value = 0

        self.logger.debug(f"Segment {segment.name} updated with values: {ls}")
        self.logger.debug(f"FIFO value after update: {temp.value}")
    =}

    method update_single_bay(bay, value){=
        """
        Updates the bay state with the given value.
        :param bay: The bay to be updated.
        :param value: 
                    [0] 0 if pallet released, 1 if pallet arrived
                    [1] pallet id or 0 if pallet released
        """
        self.logger.info(f"Updating {bay.name} with value: {value}")
        ls = []
        if bay == self.bay1:
            bay.get_property(self.PalletPosition.format(n=1)).get_property(self.palletNum).value = value[1]
            if value[0] < 0:
                self.zero_node.value = value[1]
            ls.append(self.bay1.get_property(self.PalletPosition.format(n=1)).get_property(self.palletNum).value)
            self.data_model.get_node(self.conveyor_data_exchange + self.Destinations + self.destination_1_1).value = value[1]
            self.data_model.get_node(self.conveyor_data_exchange + self.Destinations + self.destination_ok_.format(s="1_1")).value = True if value[0] > 0 else False
        elif bay == self.bay5:
            self.bay5.get_property(self.IndexPosition).get_property(self.palletNum).value = value[1]
            if value[0] < 0:
                self.zero_node.value = value[1]
            ls.append(self.bay5.get_property(self.IndexPosition).get_property(self.palletNum).value)
            self.data_model.get_node(self.conveyor_data_exchange + self.Destinations + self.destination_5).value = value[1]
            self.data_model.get_node(self.conveyor_data_exchange + self.Destinations + self.destination_ok_.format(s="5")).value = True if value[0] > 0 else False
        else:
            raise ValueError("Invalid bay for update")

        self.logger.warning(f"{bay.name} updated with values: {ls}")
    =}

    method update_bay(bay, pallet, position){=
        """
        Updates the bay state with the given value.
        :param bay: The bay to be updated.
        :param pallet: The pallet number to set.
        :param position: The position in the bay.
        """
        # Set the pallet number at the given position in the bay
        bay.get_property(self.PalletPosition.format(n=int(position))).get_property(self.palletNum).value = value
        self.data_model.get_node(self.conveyor_data_exchange + self.Destinations + self.destination_pallet_id_.format(bay=bay.name[-1], pos=position)).value = value
        self.data_model.get_node(self.conveyor_data_exchange + self.Destinations + self.destination_ok_.format(s=f"{int(bay.name[-1])}_{position}")).value = True if value > 0 else False
        self.logger.info(f"{bay.name} position {position} updated with {value}")
    =}
    
    reaction(conveyor.Segment1){=
        """
        Updates the Segment1 state with the value from the conveyor system.
        """
        self.logger.debug(f"Updating Segment1 with value: {conveyor.Segment1.value}")
        self.update_segment(self.segment_1, conveyor.Segment1.value)
    =}
    reaction(conveyor.Segment2){=
        """
        Updates the Segment2 state with the value from the conveyor system.
        """
        self.logger.debug(f"Updating Segment2 with value: {conveyor.Segment2.value}")
        self.update_segment(self.segment_2, conveyor.Segment2.value)
    =}
    reaction(conveyor.Segment3){=
        """
        Updates the Segment3 state with the value from the conveyor system.
        """
        self.logger.debug(f"Updating Segment3 with value: {conveyor.Segment3.value}")
        self.update_segment(self.segment_3, conveyor.Segment3.value)
    =}
    reaction(conveyor.Segment4){=
        """
        Updates the Segment4 state with the value from the conveyor system. 
        """
        self.logger.debug(f"Updating Segment4 with value: {conveyor.Segment4.value}")
        self.update_segment(self.segment_4, conveyor.Segment4.value)
    =}
    reaction(conveyor.Segment5){=
        """
        Updates the Segment5 state with the value from the conveyor system.
        """
        self.logger.debug(f"Updating Segment5 with value: {conveyor.Segment5.value}")
        self.update_segment(self.segment_5, conveyor.Segment5.value)
    =}
    reaction(conveyor.Segment6){=
        """
        Updates the Segment6 state with the value from the conveyor system.
        """
        self.logger.debug(f"Updating Segment6 with value: {conveyor.Segment6.value}")
        self.update_segment(self.segment_6, conveyor.Segment6.value)
    =}
    reaction(conveyor.Segment7){=
        """
        Updates the Segment7 state with the value from the conveyor system.
        """
        self.logger.debug(f"Updating Segment7 with value: {conveyor.Segment7.value}")
        self.update_segment(self.segment_7, conveyor.Segment7.value)
    =}
    reaction(conveyor.Segment8){=
        """
        Updates the Segment8 state with the value from the conveyor system.
        """
        self.logger.debug(f"Updating Segment8 with value: {conveyor.Segment8.value}")
        self.update_segment(self.segment_8, conveyor.Segment8.value)
    =}
    
    reaction(conveyor.Bay1){=
        """
        Updates the bay1 state with the value from the conveyor system.
        """
        self.update_single_bay(self.bay1, conveyor.Bay1.value)
    =}
    reaction(conveyor.Bay2_1){=
        """
        Updates the bay2 state at position 1 with the value from the conveyor system.
        """
        self.update_bay(self.bay2, conveyor.Bay2_1.value[0], conveyor.Bay2_1.value[1])
    =}
    reaction(conveyor.Bay2_2){=
        """
        Updates the bay2 state at position 2 with the value from the conveyor system.
        """
        self.update_bay(self.bay2, conveyor.Bay2_2.value[0], conveyor.Bay2_2.value[1])
    =}
    reaction(conveyor.Bay2_3){=
        """
        Updates the bay2 state at position 3 with the value from the conveyor system.
        """
        self.update_bay(self.bay2, conveyor.Bay2_3.value[0], conveyor.Bay2_3.value[1])
    =}

    reaction(conveyor.Bay3_1){=
        """
        Updates the bay3 state at position 1 with the value from the conveyor system.
        """
        self.update_bay(self.bay3, conveyor.Bay3_1.value[0], conveyor.Bay3_1.value[1])
    =}
    reaction(conveyor.Bay3_2){=
        """
        Updates the bay3 state at position 2 with the value from the conveyor system.
        """
        self.update_bay(self.bay3, conveyor.Bay3_2.value[0], conveyor.Bay3_2.value[1])
    =}
    reaction(conveyor.Bay3_3){=
        """
        Updates the bay3 state at position 3 with the value from the conveyor system.
        """
        self.update_bay(self.bay3, conveyor.Bay3_3.value[0], conveyor.Bay3_3.value[1])
    =}

    reaction(conveyor.Bay4_1){=
        """
        Updates the bay4 state at position 1 with the value from the conveyor system.
        """
        self.logger.error(f"Received Bay4_3 update: {conveyor.Bay4_3.value}")
        self.update_bay(self.bay4, conveyor.Bay4_1.value[0], conveyor.Bay4_1.value[1])
    =}
    reaction(conveyor.Bay4_2){=
        """
        Updates the bay4 state at position 2 with the value from the conveyor system.
        """
        self.update_bay(self.bay4, conveyor.Bay4_2.value[0], conveyor.Bay4_2.value[1])
    =}
    reaction(conveyor.Bay4_3){=
        """
        Updates the bay4 state at position 3 with the value from the conveyor system.
        """
        self.update_bay(self.bay4, conveyor.Bay4_3.value[0], conveyor.Bay4_3.value[1])
    =}
    reaction(conveyor.Bay5){=
        """
        Updates the Bay5 state with the value from the conveyor system.
        """
        self.update_single_bay(self.bay5, conveyor.Bay5.value)
    =}

    reaction(conveyor.Release){=
        """
        Handles the release of pallets from the conveyor system.
        """
        self.zero_node.value = conveyor.Release.value
    =}
}