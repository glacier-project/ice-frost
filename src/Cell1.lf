target Python 

import FrostMachine from "../frost/src/lib/FrostMachine.lf"

reactor Cell1 extends FrostMachine{
    //METHOD
    state show_message = {= self.data_model.get_node("Cell1/FlyingProbeTester/ShowMessage") =}
    //VARIABLE
    state busy = {= self.data_model.get_node("Cell1/FlyingProbeTester/Busy") =}
    state current_mission = {= self.data_model.get_node("Cell1/FlyingProbeTester/CurrentMission") =}
    state last_result = {= self.data_model.get_node("Cell1/FlyingProbeTester/LastResult") =}
    state board = {= self.data_model.get_node("Cell1/Board") =} 
    timer work(0ms, 1000ms)
    logical action delay
    method showMessage(text){=
        print(text)
        return True
    =}

    reaction(startup){=
        self.show_message.callback = self.showMessage
    =}
    
    reaction(work) -> delay{=
        """        
        Checks the current mission and schedules a delay based on the mission type.
        If the machine is busy, it checks the current mission and schedules a delay accordingly.
        If the mission is "BoardIn", it checks if the board is electronic and schedules a delay of 5 seconds.
        If the mission is "BoardOut", it schedules a delay of 5 seconds.
        If the mission is "StartTest", it schedules a delay of 10 seconds.
        If the machine is not busy, it does nothing.
        """
        if self.busy.value:
            if self.current_mission.value == "BoardIn":
                if self.board.value != "electronic":
                    self.board.value = ""
                    self.last_result.value = False
                    self.busy.value = False
                    self.current_mission.value = ""
                    return
                delay.schedule(SEC(5))
            elif self.current_mission.value == "BoardOut":                
                delay.schedule(SEC(5))
            elif self.current_mission.value == "StartTest":
                delay.schedule(SEC(10))
    =}

    reaction(delay){=
        self.last_result.value = True
        self.current_mission.value = ""
        self.busy.value = False
    =}
}